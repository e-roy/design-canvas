---
alwaysApply: true
---

# Design Canvas Project Structure

## File Structure

```
design-canvas/
├── components.json              # UI components configuration
├── cursor/
│   └── rules/
│       └── project-structure.mdc
├── env.example                  # Environment variables template
├── eslint.config.mjs           # ESLint configuration
├── next-env.d.ts               # Next.js TypeScript declarations
├── next.config.ts              # Next.js configuration
├── node_modules/               # Dependencies
├── package.json                # Project dependencies and scripts
├── pnpm-lock.yaml             # Package lock file
├── postcss.config.mjs         # PostCSS configuration
├── public/                     # Static assets
│   ├── file.svg
│   ├── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── README.md                   # Project documentation
├── src/
│   ├── app/                    # Next.js app directory
│   │   ├── api/                # API routes
│   │   ├── canvas/             # Canvas page
│   │   │   └── page.tsx        # Main canvas interface
│   │   ├── login/              # Authentication page
│   │   │   └── page.tsx        # Login/signup form
│   │   ├── favicon.ico
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx            # Home page
│   ├── components/
│   │   ├── ui/                 # Reusable UI components
│   │   │   ├── accordion.tsx
│   │   │   ├── alert-dialog.tsx
│   │   │   ├── alert.tsx
│   │   │   ├── aspect-ratio.tsx
│   │   │   ├── avatar.tsx
│   │   │   ├── badge.tsx
│   │   │   ├── breadcrumb.tsx
│   │   │   ├── button-group.tsx
│   │   │   ├── button.tsx
│   │   │   ├── calendar.tsx
│   │   │   ├── card.tsx
│   │   │   ├── carousel.tsx
│   │   │   ├── chart.tsx
│   │   │   ├── checkbox.tsx
│   │   │   ├── collapsible.tsx
│   │   │   ├── command.tsx
│   │   │   ├── context-menu.tsx
│   │   │   ├── dialog.tsx
│   │   │   ├── drawer.tsx
│   │   │   ├── dropdown-menu.tsx
│   │   │   ├── empty.tsx
│   │   │   ├── field.tsx
│   │   │   ├── form.tsx
│   │   │   ├── hover-card.tsx
│   │   │   ├── input-group.tsx
│   │   │   ├── input-otp.tsx
│   │   │   ├── input.tsx
│   │   │   ├── item.tsx
│   │   │   ├── kbd.tsx
│   │   │   ├── label.tsx
│   │   │   ├── menubar.tsx
│   │   │   ├── navigation-menu.tsx
│   │   │   ├── pagination.tsx
│   │   │   ├── popover.tsx
│   │   │   ├── progress.tsx
│   │   │   ├── radio-group.tsx
│   │   │   ├── resizable.tsx
│   │   │   ├── scroll-area.tsx
│   │   │   ├── select.tsx
│   │   │   ├── separator.tsx
│   │   │   ├── sheet.tsx
│   │   │   ├── sidebar.tsx
│   │   │   ├── skeleton.tsx
│   │   │   ├── slider.tsx
│   │   │   ├── sonner.tsx
│   │   │   ├── spinner.tsx
│   │   │   ├── switch.tsx
│   │   │   ├── table.tsx
│   │   │   ├── tabs.tsx
│   │   │   ├── textarea.tsx
│   │   │   ├── toggle-group.tsx
│   │   │   ├── toggle.tsx
│   │   │   └── tooltip.tsx
│   │   └── user-avatar.tsx     # User avatar component
│   ├── hooks/
│   │   └── use-mobile.ts       # Custom React hooks
│   ├── lib/
│   │   ├── firebase.ts         # Firebase configuration
│   │   └── utils.ts            # Utility functions
│   ├── types/
│   │   ├── index.ts            # Main types export file
│   │   └── presence.ts         # Presence-related type definitions
│   ├── store/
│       ├── index.ts            # Store exports
│       └── user-store.ts       # User state management
└── tsconfig.json               # TypeScript configuration
```

## Page Structure

### Authentication Flow

- **`/login`** - Login and signup page with Firebase authentication
  - Supports email/password and Google OAuth
  - Toggle between login and signup modes
  - Redirects to `/canvas` on successful authentication

### Main Application

- **`/canvas`** - Main collaborative design canvas interface
  - Protected route requiring authentication
  - Displays connection status and online users
  - Canvas implementation using Konva for 2D graphics
  - Shape creation tools and collaborative features
  - User avatar and navigation components

### State Management

- **`store/user-store.ts`** - Zustand store for user authentication state
- **`lib/firebase.ts`** - Firebase configuration and authentication setup
- **`types/index.ts`** - TypeScript type definitions and interfaces

## Installed Packages

### Dependencies

- **@hookform/resolvers**: Form validation resolvers
- **@radix-ui/react-\***: Comprehensive UI primitives library
  - accordion, alert-dialog, aspect-ratio, avatar, checkbox, collapsible
  - context-menu, dialog, dropdown-menu, hover-card, label, menubar
  - navigation-menu, popover, progress, radio-group, scroll-area
  - select, separator, slider, slot, switch, tabs, toggle, toggle-group, tooltip
- **class-variance-authority**: CSS class variant management
- **clsx**: Conditional className utility
- **cmdk**: Command palette component
- **date-fns**: Date utility library
- **embla-carousel-react**: Carousel component
- **firebase**: Firebase SDK
- **input-otp**: OTP input component
- **konva**: 2D canvas library for graphics and animations
- **konva-canvas**: Canvas rendering engine for Konva
- **lucide-react**: Icon library
- **next**: Next.js React framework (v15.5.5)
- **next-firebase-auth-edge**: Firebase auth for Next.js Edge Runtime
- **next-themes**: Theme management
- **react**: React library (v19.1.0)
- **react-day-picker**: Date picker component
- **react-dom**: React DOM (v19.1.0)
- **react-hook-form**: Form handling library
- **react-resizable-panels**: Resizable panel components
- **recharts**: Chart library
- **sonner**: Toast notification library
- **tailwind-merge**: Tailwind CSS class merging utility
- **vaul**: Drawer component
- **zod**: Schema validation
- **zustand**: State management

### Dev Dependencies

- **@eslint/eslintrc**: ESLint configuration
- **@tailwindcss/postcss**: Tailwind CSS PostCSS plugin
- **@types/node**: Node.js TypeScript types
- **@types/react**: React TypeScript types
- **@types/react-dom**: React DOM TypeScript types
- **eslint**: JavaScript linter
- **eslint-config-next**: Next.js ESLint configuration
- **tailwindcss**: CSS framework (v4)
- **tw-animate-css**: Tailwind CSS animations
- **typescript**: TypeScript compiler

## Project Type

Next.js 15 application with TypeScript, Tailwind CSS, comprehensive UI component library based on Radix UI primitives, and Konva for 2D canvas graphics.

## Development Guidelines

### Package Management

- **Use pnpm exclusively** for package management
- Never use npm or yarn - pnpm provides better performance and disk efficiency
- Use `pnpm install` for installing dependencies
- Use `pnpm add <package>` for adding new packages
- Use `pnpm remove <package>` for removing packages

### File Size Guidelines

- **Keep files under 350 lines** when possible for optimal readability
- If a file exceeds 350 lines, consider breaking it into smaller components
- Split large components into logical sub-components
- Extract utility functions into separate files
- Use composition over large monolithic components

### File Organization Rules

#### Layout Files (`layout.tsx`)

- Use for general page structure and common UI elements
- Handle shared layouts, navigation, headers, footers
- Should contain minimal business logic
- Focus on structural organization and common styling

#### Page Files (`page.tsx`)

- Use for data fetching and page-specific logic
- Handle API calls, state management, and data processing
- Should delegate UI rendering to components
- Keep page files focused on data and routing logic

#### Component Organization

- **Store components in `src/components/` folder**
- **Create page-specific folders** for components used only by specific pages
  - Example: `src/components/login/` for login page components
  - Example: `src/components/canvas/` for canvas page components
- **Use `src/components/ui/`** for reusable UI components (already established)
- **Use `src/components/`** for shared components used across multiple pages
- **Use `src/types/`** for TypeScript type definitions and interfaces
  - Organize types by domain (e.g., `presence.ts`, `auth.ts`, `canvas.ts`)
  - Use `index.ts` to export all types from domain files
- **Naming convention**: Use kebab-case for folder names, PascalCase for component files

#### Component Structure Examples

```
src/components/
├── ui/                    # Reusable UI components
├── login/                 # Login page specific components
│   ├── login-form.tsx
│   └── auth-provider.tsx
├── canvas/                # Canvas page specific components
│   ├── canvas-toolbar.tsx
│   ├── shape-tools.tsx
│   └── collaboration-panel.tsx
└── shared/                # Components used across multiple pages
    ├── navigation.tsx
    └── footer.tsx

src/types/
├── index.ts               # Main export file for all types
├── presence.ts            # Presence system types
├── auth.ts                # Authentication types (future)
└── canvas.ts              # Canvas-specific types (future)
```
